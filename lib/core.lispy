# core function
(global {true} 1)
(global {false} 0)
(global {nil} {})
(global {noop} ())

# function related
(global {func} (
    \ {args body} {
        global (head args) (\ (tail args) body)
    }
))

# unpack list into a variable arugments
(func {unpack f xs} {
    eval (join (list f) xs)
})

# pack variable arguments into a list
(func {pack f & args} {
   f args 
})

(func {map f l} { 
    if l 
    {join (list (f (first l))) (map f (tail l))}
    {nil}
})

(func {reduce f l s} {
    if l
    {reduce f (tail l) (
        f (first l) s
    )}
    {s}
})

(func {flip f a b} {f b a})

(func {comp f g x} {f (g x)})

# scope 
# evaluate list of s-expression in order
(func {do & l} {
    if (== l nil)
    {nil}
})

(func {block body} {
    ((\ {_} { unpack do body }) nil)
})

# list related 
(func {first l} {
    eval (head l)
})

(func {nth n l} {
    if (! n)
    {first l}
    {nth (- n 1) (tail l)}
})

(func {len l} {
  if (== l {})
    {0}
    {+ 1 (len (tail l))}
})

(func {last l} {
    nth (- (len l) 1) l
})

(func {take n l} {
  if (== n 0)
    {nil}
    {join (head l) (take (- n 1) (tail l))}
})

(func {drop n l} {
  if (== n 0)
    {l}
    {drop (- n 1) (tail l)}
})

(func {split n l} {
    list (take n l) (drop n l)
})

(func {in x l} {
    if (! l)
    {false}
    {
        if (== (first l) l) 
        {true}
        {in x (tail l)}
    }
})

# logic related 
(func {!! x} {
    if x 
    {1}
    {0}
})

(func {not x} {
    !! (- 1 (!! x))
})

(func {! x} {
    not x
})

(func {and2 a b} {
    !! (* (!! a) (!! b))
})

(func {or2 a b} {
    !! (+ (!! a) (!! b))
})

(func {and l} {
    reduce and2 l true
}) 

(func {or l} {
    reduce or2 l false
}) 

