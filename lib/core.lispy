# core function
(global {true} 1)
(global {false} 0)
(global {nil} {})
(global {noop} ())

# function related
(global {func} (
    \ {args body} {
        global (head args) (\ (tail args) body)
    }
))

# unpack list into a variable arugments
(func {unpack f xs} {
    eval (join (list f) xs)
})

# pack variable arguments into a list
(func {pack f & args} {
   f args 
})

(func {map f l} { 
    if l 
    {join (list (f (first l))) (map f (tail l))}
    {nil}
})

(func {reduce f l s} {
    if l
    {reduce f (tail l) (
        f (first l) s
    )}
    {s}
})

# scope 
# evaluate list of s-expression in order
(func {do & l} {
    if (== l nil)
    {nil}
})

# create a scope and evaluate in order
(func {block body} {
    ((\ {_} { unpack do body }) nil)
})

# list related 
(func {first l} {
    eval (head l)
})

(func {len l} {
  if (== l {})
    {0}
    {+ 1 (len (tail l))}
})

# logic related
(func {!! x} {
    if x 
    {1}
    {0}
})

(func {and2 a b} {
    !! (* (!! a) (!! b))
})

(func {or2 a b} {
    !! (+ (!! a) (!! b))
})

(func {and l} {
    reduce and2 l true
}) 

(func {or l} {
    reduce or2 l false
}) 

